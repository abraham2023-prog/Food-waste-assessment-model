# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CieDnUFRFsDHHlJAkGpmxGZdVwOh3EAI
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Food Waste Dashboard", layout="wide")
st.title("ðŸ“Š Food Waste Analytics Dashboard")

# ================= Upload CSV =================
uploaded_file = st.file_uploader("Only food.csv", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, encoding='utf-8')

    # ============ CLEANING ============
    numeric_columns = ['Begin month\ninventory', 'Production', 'Domestic', 'Export', 'Total',
                       'Shipment value\n(thousand baht)', 'Month-end \ninventory', 'Capacity']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = df[col].astype(str).str.replace(',', '', regex=False)
            df[col] = pd.to_numeric(df[col], errors='coerce')

    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')
    df['Month'] = pd.to_numeric(df['Month'], errors='coerce')

    # Example category mapping (shortened for demo, keep your full mapping)
    # Analyze by product category - REVISED TO MATCH YOUR PRODUCT LIST
product_categories = {
    'sugar': ['pure white sugar', 'raw sugar', 'white sugar', 'Molasses', 'sweep/suck'],
    'bakery': ['Cake', 'Cookie', 'cake', 'cookie', 'Toasted bread/Cracker/Biscuit',
               'Wafer biscuit', 'biscuits/crackers', 'Other baked goods'],
    'canned_foods': ['canned tuna', 'canned sardines', 'canned pineapple',
                    'canned sweet corn', 'canned pickles', 'other canned fruits'],
    'frozen_foods': ['Frozen and chilled chicken meat', 'Frozen and chilled pork',
                    'frozen fish', 'frozen shrimp', 'frozen squid',
                    'frozen fruits and vegetables', 'Frozen prepared food',
                    'bacon', 'ham', 'sausage', 'seasoned chicken meat', 'Ready to cook meals'],
    'condiments': ['Table condiments', 'Monosodium glutamate',
                  'Soy sauce, fermented soybean paste, dark soy sauce',
                  'Soy sauce, fermented soybean paste, light soy sauce', 'coconut milk'],
    'animal_feed': ['Ready made pig feed', 'Ready made chicken feed',
                   'Ready made fish feed', 'Ready made shrimp feed',
                   'Ready made duck feed', 'Ready made pet feed', 'Pet feed',
                   'ready made feed for other livestock', 'Ready-made pig feed'],
    'dairy': ['Yogurt', 'ice cream'],
    'staples': ['Tapioca flour', 'Instant noodles', 'instant noodles',
               'Premix', 'Soy milk', 'Dried fruits and vegetables',
               'dried fruits & vegetables', 'minced fish meat'],
    'snacks': ['Other crispy snacks', 'Other crispy snacks (Corn chips, prawn crackers, etc)',
              'other crispy baked snacks'],
    'other': ['sweep/suck']
}

# Categorize products
    df['Category'] = 'other'
    
    for category, keywords in product_categories.items():
        for keyword in keywords:
            # Use exact matching or contains based on the keyword type
            if '*' in keyword or 'etc' in keyword:
                # Use contains for partial matches
                mask = df['Product'].str.contains(keyword.replace('*', '').split('(')[0].strip(), case=False, na=False)
            else:
                # Use exact match or contains for specific products
                if keyword in ['Cake', 'Cookie', 'cake', 'cookie']:
                    # For these, we need to be careful about case sensitivity
                    mask = df['Product'].str.lower() == keyword.lower()
                else:
                    mask = df['Product'].str.contains(keyword, case=False, na=False)
            df.loc[mask, 'Category'] = category

# Manual categorization for specific products that need exact matching
manual_categories = {
    'Other baked goods (pizza, donuts, sandwich bread)': 'bakery',
    'Other crispy snacks (Corn chips, prawn crackers, etc)': 'snacks',
    'Ready to cook meals (others)': 'frozen_foods',
    'Ready-made pig feed': 'animal_feed',
    'Soy sauce, fermented soybean paste, dark soy sauce': 'condiments',
    'Soy sauce, fermented soybean paste, light soy sauce ': 'condiments',
    'dried fruits & vegetables': 'staples',
    'sweep/suck': 'other',
    'Dried fruits and vegetables': 'staples',
    'Frozen and chilled chicken meat': 'frozen_foods',
    'Frozen and chilled pork': 'frozen_foods',
    'Frozen prepared food': 'frozen_foods',
    'Instant noodles': 'staples',
    'Molasses': 'sugar',
    'Monosodium glutamate': 'condiments',
    'Pet feed': 'animal_feed',
    'Premix': 'staples',
    'Ready made chicken feed': 'animal_feed',
    'Ready made duck feed': 'animal_feed',
    'Ready made fish feed': 'animal_feed',
    'Ready made pet feed': 'animal_feed',
    'Ready made pig feed': 'animal_feed',
    'Ready made shrimp feed': 'animal_feed',
    'Soy milk': 'staples',
    'Table condiments': 'condiments',
    'Tapioca flour': 'staples',
    'Toasted bread/Cracker/Biscuit': 'bakery',
    'Wafer biscuit': 'bakery',
    'Yogurt': 'dairy',
    'bacon': 'frozen_foods',
    'biscuits/crackers': 'bakery',
    'canned pickles': 'canned_foods',
    'canned pineapple': 'canned_foods',
    'canned sardines': 'canned_foods',
    'canned sweet corn': 'canned_foods',
    'canned tuna': 'canned_foods',
    'coconut milk': 'condiments',
    'frozen fish': 'frozen_foods',
    'frozen fruits and vegetables': 'frozen_foods',
    'frozen shrimp': 'frozen_foods',
    'frozen squid': 'frozen_foods',
    'ham': 'frozen_foods',
    'ice cream': 'dairy',
    'minced fish meat': 'staples',
    'other baked goods': 'bakery',
    'other canned fruits': 'canned_foods',
    'other crispy baked snacks': 'snacks',
    'pure white sugar': 'sugar',
    'raw sugar': 'sugar',
    'ready made feed for other livestock': 'animal_feed',
    'sausage': 'frozen_foods',
    'seasoned chicken meat': 'frozen_foods',
    'white sugar': 'sugar'
}

for product, category in manual_categories.items():
    df.loc[df['Product'] == product, 'Category'] = category

# Verify categorization
print("Products by category:")
category_counts = df.groupby('Category')['Product'].nunique()
print(category_counts)

# Check for any uncategorized products
uncategorized = df[df['Category'] == 'other']['Product'].unique()
if len(uncategorized) > 0:
    print(f"\nUncategorized products: {uncategorized}")

# Check category distribution
print("\nCategory distribution:")
for category in category_counts.index:
    products_in_category = df[df['Category'] == category]['Product'].unique()
    print(f"\n{category}:")
    for product in products_in_category:
        print(f"  - {product}")

    # ============ METRICS ============
    df = df.sort_values(['Product', 'Year', 'Month'])
    df['AvgInventory'] = (df['Begin month\ninventory'] + df['Month-end \ninventory']) / 2
    df['InventoryTurnover'] = df['Total'] / df['AvgInventory'].replace(0, np.nan)
    df['MonthsOfInventory'] = df['Month-end \ninventory'] / (df['Total']/12).replace(0, np.nan)

    category_analysis = df.groupby('Category').agg({
        'Production': 'sum',
        'Total': 'sum',
        'MonthsOfInventory': 'mean',
        'InventoryTurnover': 'mean'
    }).round(2)

    # ============ DASHBOARD ============
    st.subheader("Dataset Preview")
    st.dataframe(df.head(20))

    st.subheader("Category Summary")
    st.dataframe(category_analysis)

    # KPI cards
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total Products", f"{df['Product'].nunique()}")
    c2.metric("Total Production", f"{df['Production'].sum():,.0f} tons")
    c3.metric("Total Sales", f"{df['Total'].sum():,.0f} tons")
    c4.metric("Avg Inventory (months)", f"{df['MonthsOfInventory'].mean():.2f}")

    # ============ PLOTS ============
    st.subheader("Trends & Analysis")

    # Waste trend by year/category
    yearly_waste = df.groupby(['Year', 'Category'])['Production'].sum().unstack().fillna(0)
    fig1, ax1 = plt.subplots(figsize=(12, 6))
    yearly_waste.plot(ax=ax1, marker='o')
    ax1.set_title("Production Trends by Category")
    ax1.set_ylabel("Tons")
    st.pyplot(fig1)

    # Inventory turnover
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    turnover = df.groupby('Category')['InventoryTurnover'].mean().sort_values()
    turnover.plot(kind='barh', ax=ax2)
    ax2.set_title("Average Inventory Turnover by Category")
    st.pyplot(fig2)

    # Months of Inventory by category
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    inv = df.groupby('Category')['MonthsOfInventory'].mean().sort_values()
    inv.plot(kind='barh', ax=ax3)
    ax3.set_title("Average Months of Inventory by Category")
    st.pyplot(fig3)

else:
    st.info("ðŸ‘† Upload a CSV file to start analysis")
